{
	"information_for_contributors": [
		"This file initially has been converted from Atom extension.",
		"If you want to provide a fix or improvement, please create a pull request against https://github.com/zephir-lang/zephir-vscode repository.",
		"There is an #editorsupport channel on the Phalcon Discord Server: https://discord.gg/PNFsSsr",
		"If you would like to discuss an idea or need help or have other feedback you can usually find me (@klay) idling there."
    ],
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Zephir",
	"comment": "Zephir Language support for VSCode",
	"version": "1.6.2",
	"fileTypes": [
        "zep"
    ],
	"scopeName": "source.zephir",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"begin": "(?i)^\\s*(interface)\\s+([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\s*(extends)?\\s*",
			"beginCaptures": {
				"1": {
					"name": "storage.type.interface.zephir"
				},
				"2": {
					"name": "entity.name.type.interface.zephir"
				},
				"3": {
					"name": "storage.modifier.extends.zephir"
				}
			},
			"end": "(?i)((?:[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*\\s*,\\s*)*)([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?\\s*(?:(?={)|$)",
			"endCaptures": {
				"1": {
					"patterns": [
						{
							"match": "(?i)[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*",
							"name": "entity.other.inherited-class.zephir"
						},
						{
							"include": "#punctuation-comma"
						}
					]
				},
				"2": {
					"name": "entity.other.inherited-class.zephir"
				}
			},
			"name": "meta.interface.zephir",
			"patterns": [
				{
					"include": "#namespace"
				}
			]
		},
		{
			"match": "(?i)^\\s*(namespace)\\s+([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}\\\\]+)(?=\\s*;)",
			"name": "meta.namespace.zephir",
			"captures": {
				"1": {
					"name": "keyword.other.namespace.zephir"
				},
				"2": {
					"name": "entity.name.type.namespace.zephir",
					"patterns": [
						{
							"match": "\\\\",
							"name": "punctuation.separator.inheritance.zephir"
						}
					]
				}
			}
		},
		{
			"begin": "(?i)(?:^)\\s*(namespace)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.namespace.zephir"
				}
			},
			"end": "(?<=})",
			"name": "meta.namespace.zephir",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "(?i)[a-z0-9_\\x{7f}-\\x{7fffffff}\\\\]+",
					"name": "entity.name.type.namespace.zephir",
					"captures": {
						"0": {
							"patterns": [
								{
									"match": "\\\\",
									"name": "punctuation.separator.inheritance.zephir"
								}
							]
						}
					}
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.namespace.begin.bracket.curly.zephir"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.namespace.end.bracket.curly.zephir"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "[^\\s]+",
					"name": "invalid.illegal.identifier.zephir"
				}
			]
		},
		{
			"match": "\\s+(?=use\\b)"
		},
		{
			"begin": "(?i)\\buse\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.other.use.zephir"
				}
			},
			"end": "(?<=})|(?=;)",
			"name": "meta.use.zephir",
			"patterns": [
				{
					"match": "\\b(const|function)\\b",
					"name": "storage.type.${1:/downcase}.zephir"
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.use.begin.bracket.curly.zephir"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.use.end.bracket.curly.zephir"
						}
					},
					"patterns": [
						{
							"include": "#scope-resolution"
						},
						{
							"match": "(?i)\\b(as)\\s+(final|abstract|public|private|protected|static)\\s+([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)",
							"captures": {
								"1": {
									"name": "keyword.other.use-as.zephir"
								},
								"2": {
									"name": "storage.modifier.zephir"
								},
								"3": {
									"name": "entity.other.alias.zephir"
								}
							}
						},
						{
							"match": "(?i)\\b(as)\\s+([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)",
							"captures": {
								"1": {
									"name": "keyword.other.use-as.zephir"
								},
								"2": {
									"patterns": [
										{
											"match": "^(?:final|abstract|public|private|protected|static)$",
											"name": "storage.modifier.zephir"
										},
										{
											"match": ".+",
											"name": "entity.other.alias.zephir"
										}
									]
								}
							}
						},
						{
							"match": "(?i)\\b(insteadof)\\s+([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)",
							"captures": {
								"1": {
									"name": "keyword.other.use-insteadof.zephir"
								},
								"2": {
									"name": "support.class.zephir"
								}
							}
						},
						{
							"include": "#punctuation-semicolon"
						},
						{
							"include": "#use-inner"
						}
					]
				},
				{
					"include": "#use-inner"
				}
			]
		},
		{
			"begin": "(?i)^\\s*(?:(abstract|final)\\s+)?(class)\\s+([$a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.${1:/downcase}.zephir"
				},
				"2": {
					"name": "storage.type.class.zephir"
				},
				"3": {
					"name": "entity.name.type.class.zephir"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.class.end.bracket.curly.zephir"
				}
			},
			"name": "meta.class.zephir",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "(?i)(extends)\\s+",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.extends.zephir"
						}
					},
					"contentName": "meta.other.inherited-class.zephir",
					"end": "(?i)(?=[^a-z0-9_\\x{7f}-\\x{7fffffff}\\\\])",
					"patterns": [
						{
							"begin": "(?i)(?=\\\\?[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*\\\\)",
							"end": "(?i)([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?(?=[^a-z0-9_\\x{7f}-\\x{7fffffff}\\\\])",
							"endCaptures": {
								"1": {
									"name": "entity.other.inherited-class.zephir"
								}
							},
							"patterns": [
								{
									"include": "#namespace"
								}
							]
						},
						{
							"include": "#class-builtin"
						},
						{
							"include": "#namespace"
						},
						{
							"match": "(?i)[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*",
							"name": "entity.other.inherited-class.zephir"
						}
					]
				},
				{
					"begin": "(?i)(implements)\\s+",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.implements.zephir"
						}
					},
					"end": "(?i)(?=[;{])",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "(?i)(?=[a-z0-9_\\x{7f}-\\x{7fffffff}\\\\]+)",
							"contentName": "meta.other.inherited-class.zephir",
							"end": "(?i)(?:\\s*(?:,|(?=[^a-z0-9_\\x{7f}-\\x{7fffffff}\\\\\\s]))\\s*)",
							"patterns": [
								{
									"begin": "(?i)(?=\\\\?[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*\\\\)",
									"end": "(?i)([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?(?=[^a-z0-9_\\x{7f}-\\x{7fffffff}\\\\])",
									"endCaptures": {
										"1": {
											"name": "entity.other.inherited-class.zephir"
										}
									},
									"patterns": [
										{
											"include": "#namespace"
										}
									]
								},
								{
									"include": "#class-builtin"
								},
								{
									"include": "#namespace"
								},
								{
									"match": "(?i)[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*",
									"name": "entity.other.inherited-class.zephir"
								}
							]
						}
					]
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.class.begin.bracket.curly.zephir"
						}
					},
					"end": "(?=})",
					"contentName": "meta.class.body.zephir",
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		{
			"include": "#switch_statement"
		},
		{
			"include": "#for-loop"
		},
		{
			"include": "#control-flow"
		},
		{
			"begin": "(?i)\\b((?:require|include)(?:_once)?)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.import.include.zephir"
				}
			},
			"end": "(?=\\s|;|$)",
			"name": "meta.include.zephir",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "\\b(catch)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.exception.catch.zephir"
				}
			},
			"end": "\\{",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.begin.bracket.curly.zephir"
				}
			},
			"name": "meta.catch.zephir",
			"patterns": [
				{
					"include": "#namespace"
				},
				{
					"match": "(?i)([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)((?:\\s*\\|\\s*[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)*)\\s*(?:,)\\s*((\\$+)?[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)",
					"captures": {
						"1": {
							"name": "support.class.exception.zephir"
						},
						"2": {
							"patterns": [
								{
									"match": "(?i)[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*",
									"name": "support.class.exception.zephir"
								},
								{
									"match": "\\|",
									"name": "punctuation.separator.delimiter.zephir"
								}
							]
						},
						"3": {
							"name": "variable.other.zephir"
						},
						"4": {
							"name": "punctuation.definition.variable.zephir"
						}
					}
				}
			]
		},
		{
			"match": "\\b(catch|try|throw|exception|finally)\\b",
			"name": "keyword.control.exception.zephir"
		},
		{
			"include": "#function-definition"
		},
		{
			"begin": "((?:(?:final|abstract|public|private|protected|static|inline|internal|scoped|deprecated)\\s+)*)(function|fn)\\s+(?i:(__(?:construct|destruct|call|callStatic|get|set|isset|unset|sleep|wakeup|toString|invoke|set_state|clone|debugInfo|autoload))|([$a-zA-Z_\\x{7f}-\\x{7fffffff}][a-zA-Z0-9_\\x{7f}-\\x{7fffffff}]*))\\s*(\\()",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"match": "final|abstract|public|private|protected|static|inline|internal|scoped|deprecated",
							"name": "storage.modifier.zephir"
						}
					]
				},
				"2": {
					"name": "storage.type.function.zephir"
				},
				"3": {
					"name": "support.function.magic.zephir"
				},
				"4": {
					"name": "entity.name.function.zephir"
				},
				"5": {
					"name": "punctuation.definition.parameters.begin.bracket.round.zephir"
				}
			},
			"contentName": "meta.function.parameters.zephir",
			"end": "(\\))(?:\\s*(:)\\s*([a-zA-Z_\\x{7f}-\\x{7fffffff}][a-zA-Z0-9_\\x{7f}-\\x{7fffffff}]*))?",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.parameters.end.bracket.round.zephir"
				},
				"2": {
					"name": "keyword.operator.return-value.zephir"
				},
				"3": {
					"name": "storage.type.zephir"
				}
			},
			"name": "meta.function.zephir",
			"patterns": [
				{
					"include": "#function-parameters"
				}
			]
		},
		{
			"include": "#constants"
		},
		{
			"include": "#scope-resolution"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#strings"
		},
		{
			"begin": "\\b(array)\\b\\s*(?=[\\\\$a-z_])",
			"beginCaptures": {
				"1": {
					"name": "storage.type.zephir"
				}
			},
			"end": "(=)\\s*(\\[)",
			"endCaptures": {
				"1": {
					"name": "keyword.operator.assignment.zephir"
				},
				"2": {
					"name": "punctuation.section.array.begin.zephir"
				}
			},
			"patterns": [
				{
					"include": "#variable-name"
				},
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "\\b(array)\\b\\s*\\b(?:(\\$+)?[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\b\\s*(\\[)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.zephir"
				},
				"2": {
					"name": "punctuation.section.array.begin.zephir"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.zephir"
				}
			},
			"name": "meta.array.zephir",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"match": "(?i)(\\()\\s*(array|real|double|float|int(?:eger)?|bool(?:ean)?|i?string|u?long|u?char|void|unsigned|null|object|binary|unset)\\s*(\\))",
			"captures": {
				"1": {
					"name": "punctuation.definition.storage-type.begin.bracket.round.zephir"
				},
				"2": {
					"name": "storage.type.zephir"
				},
				"3": {
					"name": "punctuation.definition.storage-type.end.bracket.round.zephir"
				}
			}
		},
		{
			"include": "#typehinting"
		},
		{
			"match": "(?i)\\b(array|real|double|float|uint|int(eger)?|u?long|u?char|void|unsigned|null|bool(ean)?|string|class|var|function|interface|object)\\b",
			"name": "storage.type.zephir"
		},
		{
			"match": "(?i)\\b(global|abstract|const|extends|implements|final|private|protected|public|static|inline|internal|scoped|deprecated)\\b",
			"name": "storage.modifier.zephir"
		},
		{
			"include": "#object"
		},
		{
			"include": "#punctuation-semicolon"
		},
		{
			"match": ":",
			"name": "punctuation.terminator.statement.zephir"
		},
		{
			"include": "#numbers"
		},
		{
			"match": "(?i)\\bclone\\b",
			"name": "keyword.other.clone.zephir"
		},
		{
			"match": "\\.=?",
			"name": "keyword.operator.string.zephir"
		},
		{
			"captures": {
				"1": {
					"name": "keyword.operator.assignment.zephir"
				},
				"2": {
					"name": "storage.modifier.reference.zephir"
				},
				"3": {
					"name": "storage.modifier.reference.zephir"
				}
			},
			"match": "(?i)(\\=)(&)|(&)(?=[$a-z_])"
		},
		{
			"match": "@",
			"name": "keyword.operator.error-control.zephir"
		},
		{
			"match": "===|==|!==|!=|<>",
			"name": "keyword.operator.comparison.zephir"
		},
		{
			"match": "=|\\+=|\\-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=",
			"name": "keyword.operator.assignment.zephir"
		},
		{
			"match": "<=>|<=|>=|<|>",
			"name": "keyword.operator.comparison.zephir"
		},
		{
			"match": "\\-\\-|\\+\\+",
			"name": "keyword.operator.increment-decrement.zephir"
		},
		{
			"match": "\\-|\\+|\\*|/|%",
			"name": "keyword.operator.arithmetic.zephir"
		},
		{
			"match": "(?i)(!|&&|\\|\\|)|\\b(and|or|xor|as)\\b",
			"name": "keyword.operator.logical.zephir"
		},
		{
			"include": "#function-call"
		},
		{
			"match": "<<|>>|~|\\^|&|\\|",
			"name": "keyword.operator.bitwise.zephir"
		},
		{
			"include": "#fetch-operator"
		},
		{
			"include": "#typeof-operator"
		},
		{
			"include": "#instanceof"
		},
		{
			"include": "#instantiation"
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.goto.zephir"
				},
				"2": {
					"name": "support.other.zephir"
				}
			},
			"match": "(?i)(goto)\\s+([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)"
		},
		{
			"captures": {
				"1": {
					"name": "entity.name.goto-label.zephir"
				}
			},
			"match": "(?i)^\\s*([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\s*:(?!:)"
		},
		{
			"include": "#ternary_shorthand"
		},
		{
			"include": "#null_coalescing"
		},
		{
			"include": "#ternary_expression"
		},
		{
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.begin.bracket.curly.zephir"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.end.bracket.curly.zephir"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.zephir"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.zephir"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.begin.bracket.round.zephir"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.end.bracket.round.zephir"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"include": "#punctuation-comma"
		}
	],
	"repository": {
		"class-builtin": {
			"patterns": [
				{
					"match": "(?i)(\\\\)?\\b((APC|Append)Iterator|Array(Access|Iterator|Object)|Bad(Function|Method)CallException|(Caching|CallbackFilter)Iterator|Collator|Collectable|Cond|Countable|CURLFile|Date(Interval|Period|Time(Interface|Immutable|Zone)?)?|Directory(Iterator)?|DomainException|DOM(Attr|CdataSection|CharacterData|Comment|Document(Fragment)?|Element|EntityReference|Implementation|NamedNodeMap|Node(list)?|ProcessingInstruction|Text|XPath)|(Error)?Exception|EmptyIterator|finfo|Ev(Check|Child|Embed|Fork|Idle|Io|Loop|Periodic|Prepare|Signal|Stat|Timer|Watcher)?|Event(Base|Buffer(Event)?|SslContext|Http(Request|Connection)?|Config|DnsBase|Util|Listener)?|FANNConnection|(Filter|Filesystem)Iterator|Gender\\\\Gender|GlobIterator|Gmagick(Draw|Pixel)?|Haru(Annotation|Destination|Doc|Encoder|Font|Image|Outline|Page)|Http((Inflate|Deflate)?Stream|Message|Request(Pool)?|Response|QueryString)|HRTime\\\\(PerformanceCounter|StopWatch)|Intl(Calendar|((CodePoint|RuleBased)?Break|Parts)?Iterator|DateFormatter|TimeZone)|Imagick(Draw|Pixel(Iterator)?)?|InfiniteIterator|InvalidArgumentException|Iterator(Aggregate|Iterator)?|JsonSerializable|KTaglib_(MPEG_(File|AudioProperties)|Tag|ID3v2_(Tag|(AttachedPicture)?Frame))|Lapack|(Length|Locale|Logic)Exception|LimitIterator|Lua(Closure)?|Mongo(BinData|Client|Code|Collection|CommandCursor|Cursor(Exception)?|Date|DB(Ref)?|DeleteBatch|Grid(FS(Cursor|File)?)|Id|InsertBatch|Int(32|64)|Log|Pool|Regex|ResultException|Timestamp|UpdateBatch|Write(Batch|ConcernException))?|Memcache(d)?|MessageFormatter|MultipleIterator|Mutex|mysqli(_(driver|stmt|warning|result))?|MysqlndUh(Connection|PreparedStatement)|NoRewindIterator|Normalizer|NumberFormatter|OCI-(Collection|Lob)|OuterIterator|(OutOf(Bounds|Range)|Overflow)Exception|ParentIterator|PDO(Statement)?|Phar(Data|FileInfo)?|php_user_filter|Pool|QuickHash(Int(Set|StringHash)|StringIntHash)|Recursive(Array|Caching|Directory|Fallback|Filter|Iterator|Regex|Tree)?Iterator|Reflection(Class|Function(Abstract)?|Method|Object|Parameter|Property|(Zend)?Extension)?|RangeException|Reflector|RegexIterator|ResourceBundle|RuntimeException|RRD(Creator|Graph|Updater)|SAM(Connection|Message)|SCA(_(SoapProxy|LocalProxy))?|SDO_(DAS_(ChangeSummary|Data(Factory|Object)|Relational|Setting|XML(_Document)?)|Data(Factory|Object)|Exception|List|Model_(Property|ReflectionDataObject|Type)|Sequence)|SeekableIterator|Serializable|SessionHandler(Interface)?|SimpleXML(Iterator|Element)|SNMP|Soap(Client|Fault|Header|Param|Server|Var)|SphinxClient|Spoofchecker|Spl(DoublyLinkedList|Enum|File(Info|Object)|FixedArray|(Max|Min)?Heap|Observer|ObjectStorage|(Priority)?Queue|Stack|Subject|Type|TempFileObject)|SQLite(3(Result|Stmt)?|Database|Result|Unbuffered)|stdClass|streamWrapper|SVM(Model)?|Swish(Result(s)?|Search)?|Sync(Event|Mutex|ReaderWriter|Semaphore)|Thread(ed)?|tidy(Node)?|TokyoTyrant(Table|Iterator|Query)?|Transliterator|Traversable|UConverter|(Underflow|UnexpectedValue)Exception|V8Js(Exception)?|Varnish(Admin|Log|Stat)|Worker|Weak(Map|Ref)|XML(Diff\\\\(Base|DOM|File|Memory)|Reader|Writer)|XsltProcessor|Yaf_(Route_(Interface|Map|Regex|Rewrite|Simple|Supervar)|Action_Abstract|Application|Config_(Simple|Ini|Abstract)|Controller_Abstract|Dispatcher|Exception|Loader|Plugin_Abstract|Registry|Request_(Abstract|Simple|Http)|Response_Abstract|Router|Session|View_(Simple|Interface))|Yar_(Client(_Exception)?|Concurrent_Client|Server(_Exception)?)|ZipArchive|ZMQ(Context|Device|Poll|Socket)?)\\b",
					"name": "support.class.builtin.zephir",
					"captures": {
						"1": {
							"name": "punctuation.separator.inheritance.zephir"
						}
					}
				}
			]
		},
		"class-name": {
			"patterns": [
				{
					"begin": "(?i)(?=\\\\?[a-z_0-9]+\\\\)",
					"end": "(?i)([a-z_][a-z_0-9]*)?(?![a-z0-9_\\\\])",
					"endCaptures": {
						"1": {
							"name": "support.class.zephir"
						}
					},
					"patterns": [
						{
							"include": "#namespace"
						}
					]
				},
				{
					"include": "#class-builtin"
				},
				{
					"begin": "(?=[\\\\a-zA-Z_])",
					"end": "(?i)([a-z_][a-z_0-9]*)?(?![a-z0-9_\\\\])",
					"endCaptures": {
						"1": {
							"name": "support.class.zephir"
						}
					},
					"patterns": [
						{
							"include": "#namespace"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*\\*(?=\\s)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.zephir"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.zephir"
						}
					},
					"name": "comment.block.documentation.phpdoc",
					"patterns": [
						{
							"include": "#docblock"
						}
					]
				},
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.zephir"
						}
					},
					"end": "\\*/",
					"name": "comment.block.zephir"
				},
				{
					"begin": "(^\\s+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.zephir"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.zephir"
								}
							},
							"end": "\\n",
							"name": "comment.line.double-slash.zephir"
						}
					]
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"match": "(?i)\\b(TRUE|FALSE|NULL|__(FILE|LINE|DIR|FUNCTION|CLASS|METHOD|LINE|NAMESPACE)__|ON|OFF|YES|NO|NL|BR|TAB)\\b",
					"name": "constant.language.zephir"
				},
				{
					"match": "(?!\\|\\$|->)(?:::)?\\s*\\b([_A-Z][_A-Z0-9]*)\\b(?=\\s|;|$)",
					"captures":{
						"1": {
							"name": "constant.language.zephir"
						}
					}
				},
				{
					"match": "(?!\\|\\$|->)(const)\\s*\\b([_A-Z][_A-Z0-9]*)\\b(?=\\s|;|=|$)",
					"captures":{
						"1": {
							"name": "storage.modifier.zephir"
						},
						"2": {
							"name": "constant.language.zephir"
						}
					}
				}
			]
		},
		"function-definition": {
			"begin": "(?i)\\b(function|fn)\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.zephir"
				}
			},
			"end": "(?={)",
			"name": "meta.function.closure.zephir",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.begin.bracket.round.zephir"
						}
					},
					"contentName": "meta.function.parameters.zephir",
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.bracket.round.zephir"
						}
					},
					"patterns": [
						{
							"include": "#function-parameters"
						}
					]
				},
				{
					"begin": "(?i)(use)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.function.use.zephir"
						},
						"2": {
							"name": "punctuation.definition.parameters.begin.bracket.round.zephir"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.bracket.round.zephir"
						}
					},
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "variable.other.zephir"
								},
								"2": {
									"name": "storage.modifier.reference.zephir"
								},
								"3": {
									"name": "punctuation.definition.variable.zephir"
								}
							},
							"match": "(?i)((&)?\\s*(\\$+)?[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\s*(?=,|\\))",
							"name": "meta.function.closure.use.zephir"
						}
					]
				}
			]
		},
		"function-parameters": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"begin": "(?i)(array)\\s+((&)?\\s*(\\$+)?[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\s*(=)\\s*(array)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "storage.type.zephir"
						},
						"2": {
							"name": "variable.other.zephir"
						},
						"3": {
							"name": "storage.modifier.reference.zephir"
						},
						"4": {
							"name": "punctuation.definition.variable.zephir"
						},
						"5": {
							"name": "keyword.operator.assignment.zephir"
						},
						"6": {
							"name": "support.function.construct.zephir"
						},
						"7": {
							"name": "punctuation.definition.array.begin.bracket.round.zephir"
						}
					},
					"contentName": "meta.array.zephir",
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.array.end.bracket.round.zephir"
						}
					},
					"name": "meta.function.parameter.array.zephir",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#numbers"
						}
					]
				},
				{
					"match": "(?i)(array|callable)\\s+((&)?\\s*(\\$+)?[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)(?:\\s*(=)\\s*(?:(null)|(\\[)((?>[^\\[\\]]+|\\[\\g<8>\\])*)(\\])|((?:\\S*?\\(\\))|(?:\\S*?))))?\\s*(?=,|\\)|/[/*]|\\#|$)",
					"name": "meta.function.parameter.array.zephir",
					"captures": {
						"1": {
							"name": "storage.type.zephir"
						},
						"2": {
							"name": "variable.other.zephir"
						},
						"3": {
							"name": "storage.modifier.reference.zephir"
						},
						"4": {
							"name": "punctuation.definition.variable.zephir"
						},
						"5": {
							"name": "keyword.operator.assignment.zephir"
						},
						"6": {
							"name": "constant.language.zephir"
						},
						"7": {
							"name": "punctuation.section.array.begin.zephir"
						},
						"8": {
							"patterns": [
								{
									"include": "#parameter-default-types"
								}
							]
						},
						"9": {
							"name": "punctuation.section.array.end.zephir"
						},
						"10": {
							"name": "invalid.illegal.non-null-typehinted.zephir"
						}
					}
				},
				{
					"include": "#typehinting"
				},
				{
					"begin": "(?i)(\\\\?(?:[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*\\\\)*)([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\s+((&)?\\s*(\\.\\.\\.)?(\\$+)?[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)",
					"beginCaptures": {
						"1": {
							"name": "support.other.namespace.zephir",
							"patterns": [
								{
									"match": "(?i)[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*",
									"name": "storage.type.zephir"
								},
								{
									"match": "\\\\",
									"name": "punctuation.separator.inheritance.zephir"
								}
							]
						},
						"2": {
							"name": "storage.type.zephir"
						},
						"3": {
							"name": "variable.other.zephir"
						},
						"4": {
							"name": "storage.modifier.reference.zephir"
						},
						"5": {
							"name": "keyword.operator.variadic.zephir"
						},
						"6": {
							"name": "punctuation.definition.variable.zephir"
						}
					},
					"end": "(?=,|\\)|/[/*]|\\#)",
					"name": "meta.function.parameter.typehinted.zephir",
					"patterns": [
						{
							"begin": "=",
							"beginCaptures": {
								"0": {
									"name": "keyword.operator.assignment.zephir"
								}
							},
							"end": "(?=,|\\)|/[/*]|\\#)",
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					]
				},
				{
					"captures": {
						"1": {
							"name": "variable.other.zephir"
						},
						"2": {
							"name": "storage.modifier.reference.zephir"
						},
						"3": {
							"name": "keyword.operator.variadic.zephir"
						},
						"4": {
							"name": "punctuation.definition.variable.zephir"
						}
					},
					"match": "(?i)((&)?\\s*(\\.\\.\\.)?(\\$+)?[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\s*(?=,|\\)|/[/*]|\\#|$)",
					"name": "meta.function.parameter.no-default.zephir"
				},
				{
					"begin": "(?i)((&)?\\s*(\\.\\.\\.)?(\\$+)?[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\s*(=)\\s*(?:(\\[)((?>[^\\[\\]]+|\\[\\g<6>\\])*)(\\]))?",
					"beginCaptures": {
						"1": {
							"name": "variable.other.zephir"
						},
						"2": {
							"name": "storage.modifier.reference.zephir"
						},
						"3": {
							"name": "keyword.operator.variadic.zephir"
						},
						"4": {
							"name": "punctuation.definition.variable.zephir"
						},
						"5": {
							"name": "keyword.operator.assignment.zephir"
						},
						"6": {
							"name": "punctuation.section.array.begin.zephir"
						},
						"7": {
							"patterns": [
								{
									"include": "#parameter-default-types"
								}
							]
						},
						"8": {
							"name": "punctuation.section.array.end.zephir"
						}
					},
					"end": "(?=,|\\)|/[/*]|\\#)",
					"name": "meta.function.parameter.default.zephir",
					"patterns": [
						{
							"include": "#parameter-default-types"
						}
					]
				}
			]
		},
		"namespace": {
			"begin": "(?i)(?:(namespace)|[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?(\\\\)",
			"beginCaptures": {
				"1": {
					"name": "variable.language.namespace.zephir"
				},
				"2": {
					"name": "punctuation.separator.inheritance.zephir"
				}
			},
			"end": "(?i)(?![a-z0-9_\\x{7f}-\\x{7fffffff}]*\\\\)",
			"name": "support.other.namespace.zephir",
			"patterns": [
				{
					"match": "\\\\",
					"name": "punctuation.separator.inheritance.zephir"
				}
			]
		},
		"function-call": {
			"patterns": [
				{
					"begin": "(?i)(\\\\?(?<![a-z0-9_\\x{7f}-\\x{7fffffff}])[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*(?:\\\\[$a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)+)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"include": "#namespace"
								},
								{
									"match": "(?i)[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*",
									"name": "entity.name.function.zephir"
								}
							]
						},
						"2": {
							"name": "punctuation.definition.arguments.begin.bracket.round.zephir"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.arguments.end.bracket.round.zephir"
						}
					},
					"name": "meta.function-call.zephir",
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "(?i)(\\\\)?(?<![a-z0-9_\\x{7f}-\\x{7fffffff}])([$a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"include": "#namespace"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"match": "(?i)[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*",
									"name": "entity.name.function.zephir"
								}
							]
						},
						"3": {
							"name": "punctuation.definition.arguments.begin.bracket.round.zephir"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.arguments.end.bracket.round.zephir"
						}
					},
					"name": "meta.function-call.zephir",
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "(?i)\\b(print|echo)\\b",
					"name": "support.function.construct.output.zephir"
				}
			]
		},
		"instantiation": {
			"begin": "(?i)(new)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.new.zephir"
				}
			},
			"end": "(?i)(?=[^$a-z0-9_\\x{7f}-\\x{7fffffff}\\\\])",
			"patterns": [
				{
					"match": "(?<!->|\\$)\\b(parent|static|self)(?![a-z0-9_\\x{7f}-\\x{7fffffff}])",
					"name": "variable.language.${1:/downcase}.zephir"
				},
				{
					"include": "#class-name"
				},
				{
					"include": "#variable-name"
				}
			]
		},
		"typeof-operator": {
			"name": "keyword.operator.expression.typeof.zephir",
			"match": "(?<!->|\\$)\\btypeof\\b(?!\\$|->)"
		},
		"fetch-operator": {
			"name": "keyword.operator.expression.fetch.zephir",
			"match": "(?<!->|\\$)\\bfetch\\b(?!\\$|->)"
		},
		"typehinting": {
			"begin": "<",
			"captures": {
				"0": {
					"name": "keyword.other.angle-bracket.zephir"
				}
			},
			"comment": "Angle brackets may be used around a type hinting.",
			"end": ">|(\\s)",
			"endCaptures": {
				"0": {
					"name": "keyword.other.angle-bracket.zephir"
				},
				"1": {
					"name": "invalid.illegal.missing.angle-bracket.zephir"
				}
			},
			"name": "meta.function.parameter.typehinted.zephir",
			"patterns": [
				{
					"include": "#class-name"
				}
			]
		},
		"instanceof": {
			"begin": "(?i)\\b(instanceof)\\s+(?=[\\\\$a-z_])",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.type.zephir"
				}
			},
			"end": "(?i)(?=[^\\\\$a-z0-9_\\x{7f}-\\x{7fffffff}])",
			"patterns": [
				{
					"include": "#class-name"
				},
				{
					"include": "#variable-name"
				}
			]
		},
		"interpolation": {
			"patterns": [
				{
					"match": "\\\\[0-7]{1,3}",
					"name": "constant.character.escape.octal.zephir"
				},
				{
					"match": "\\\\x[0-9A-Fa-f]{1,2}",
					"name": "constant.character.escape.hex.zephir"
				},
				{
					"match": "\\\\u{[0-9A-Fa-f]+}",
					"name": "constant.character.escape.unicode.zephir"
				}
			]
		},
		"interpolation_double_quoted": {
			"patterns": [
				{
					"match": "\\\\\"",
					"name": "constant.character.escape.zephir"
				},
				{
					"include": "#interpolation"
				}
			]
		},
		"parameter-default-types": {
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"match": "=>",
					"name": "keyword.operator.key.zephir"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.zephir"
				},
				{
					"begin": "(array)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "support.function.construct.zephir"
						},
						"2": {
							"name": "punctuation.definition.array.begin.bracket.round.zephir"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.array.end.bracket.round.zephir"
						}
					},
					"name": "meta.array.zephir",
					"patterns": [
						{
							"include": "#parameter-default-types"
						}
					]
				},
				{
					"include": "#instantiation"
				},
				{
					"begin": "(?i)(?=[a-z0-9_\\x{7f}-\\x{7fffffff}\\\\]+(::)([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?)",
					"end": "(?i)(::)([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?",
					"endCaptures": {
						"1": {
							"name": "keyword.operator.class.zephir"
						},
						"2": {
							"name": "constant.other.class.zephir"
						}
					},
					"patterns": [
						{
							"include": "#class-name"
						}
					]
				},
				{
					"include": "#constants"
				}
			]
		},
		"docblock": {
			"patterns": [
				{
					"match": "^(?!\\s*\\*).*?(?:(?=\\*\\/)|$\\n?)",
					"name": "invalid.illegal.missing-asterisk.phpdoc"
				},
				{
					"match": "^\\s*\\*\\s*((@)(?:access|api))\\s+((public|private|protected)|(.+))\\b\\s*$",
					"captures": {
						"1": {
							"name": "storage.type.class.phpdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.phpdoc"
						},
						"4": {
							"name": "constant.language.access-type.phpdoc"
						},
						"5": {
							"name": "invalid.illegal.wrong-access-type.phpdoc"
						}
					}
				},
				{
					"match": "^\\s*\\*\\s*((@)author)\\s+([^@\\s<>*/](?:[^@<>*/]|\\*[^/])*)(?:\\s*(<)([^>\\s]+)(>))?",
					"captures": {
						"1": {
							"name": "storage.type.class.phpdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.phpdoc"
						},
						"3": {
							"name": "entity.name.type.instance.phpdoc"
						},
						"4": {
							"name": "punctuation.definition.bracket.angle.begin.phpdoc"
						},
						"5": {
							"name": "constant.other.email.link.underline.phpdoc"
						},
						"6": {
							"name": "punctuation.definition.bracket.angle.end.phpdoc"
						}
					}
				},
				{
					"name": "meta.example.phpdoc",
					"begin": "\\s*\\*\\s*((<)(?:code|example)(>))",
					"beginCaptures": {
						"1": {
							"name": "entity.name.tag.inline.phpdoc"
						},
						"2": {
							"name": "punctuation.definition.bracket.angle.begin.phpdoc"
						},
						"3": {
							"name": "punctuation.definition.bracket.angle.end.phpdoc"
						}
					},
					"end": "(</)(?:code|example)(>)|(?=\\*/)",
					"endCaptures": {
						"0": {
							"name": "entity.name.tag.inline.phpdoc"
						},
						"1": {
							"name": "punctuation.definition.bracket.angle.begin.phpdoc"
						},
						"2": {
							"name": "punctuation.definition.bracket.angle.end.phpdoc"
						}
					},
					"patterns": [
						{
							"match": "^\\s\\*\\s+"
						},
						{
							"match": "[^\\s*](?:[^*]|\\*[^/])*",
							"captures": {
								"0": {
									"name": "source.embedded.zephir"
								}
							}
						}
					]
				},
				{
					"match": "((@)see)\\s+(?:((?=https?://)(?:[^\\s*]|\\*[^/])+)|((?!https?://|(?:\\[[^\\[\\]]*\\])?{@(?:link)\\b)(?:[^@\\s*/]|\\*[^/])+))",
					"captures": {
						"1": {
							"name": "storage.type.class.phpdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.phpdoc"
						},
						"3": {
							"name": "variable.other.link.underline.phpdoc"
						},
						"4": {
							"name": "entity.name.type.instance.phpdoc"
						}
					}
				},
				{
					"name": "meta.other.type.phpdoc",
					"begin": "((@)(?:global|param|property(-(read|write))?|return|throws|var))\\s+(?=[A-Za-z_\\x{7f}-\\x{7fffffff}\\\\]|\\()",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.phpdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.phpdoc"
						}
					},
					"end": "(?=((?<!\\|)\\s+(?!\\|))|\\*/)",
					"patterns": [
						{
							"include": "#docblock-array-type-2"
						},
						{
							"include": "#docblock-array-type-1"
						},
						{
							"include": "#docblock-data-types"
						}
					]
				},
				{
					"begin": "((@)(?:license|version))\\s+(([''\"]))",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.phpdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.phpdoc"
						},
						"3": {
							"name": "variable.other.phpdoc"
						},
						"4": {
							"name": "punctuation.definition.string.begin.phpdoc"
						}
					},
					"end": "(\\3)|(?=$|\\*/)",
					"endCaptures": {
						"0": {
							"name": "variable.other.phpdoc"
						},
						"1": {
							"name": "punctuation.definition.string.end.phpdoc"
						}
					}
				},
				{
					"match": "((@)link)\\s+(.+)",
					"captures": {
						"1": {
							"name": "storage.type.class.phpdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.phpdoc"
						},
						"3": {
							"name": "variable.other.link.underline.phpdoc"
						}
					}
				},
				{
					"name": "meta.tag.inline.phpdoc",
					"match": "{((@)(link|inherit[Dd]oc)).+?}",
					"captures": {
						"1": {
							"name": "storage.type.class.phpdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.phpdoc"
						}
					}
				},
				{
					"match": "((@)(access|api|author|see|link|license|version|global|param|property(-(read|write))?|return|throws|var|abstract|category|copyright|inherit[Dd]oc|internal|method|package|since|source|static|subpackage|todo|fixme|uses|deprecated|final|ignore))\\b",
					"captures": {
						"1": {
							"name": "storage.type.class.phpdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.phpdoc"
						}
					}

				}
			]
		},
		"docblock-data-types": {
			"match": "(?i)[$a-z_\\x{7f}-\\x{7fffffff}\\\\][a-z0-9_\\x{7f}-\\x{7fffffff}\\\\]*(\\|[a-z_\\x{7f}-\\x{7fffffff}\\\\][a-z0-9_\\x{7f}-\\x{7fffffff}\\\\]*)*",
			"captures": {
				"0": {
					"patterns": [
						{
							"match": "\\b(int(eger)?|u?int|bool(ean)?|float|double|u?long|u?char|i?string|void|var|unsigned|null|mixed|array|self|static|this|callable|resource|object|false|true|\\.\\.\\.)\\b",
							"name": "variable.other.phpdoc"
						},
						{
							"include": "#docblock-instance-types"
						},
						{
							"match": "\\|",
							"name": "punctuation.separator.delimiter.zephir"
						}
					]
				}
			}
		},
		"docblock-instance-types": {
			"patterns": [
				{
					"begin": "(?i)(?=\\\\?[$a-z_0-9]+\\\\)",
					"end": "(?i)([a-z_][a-z_0-9]*)?(?![a-z0-9_\\\\])",
					"endCaptures": {
						"0": {
							"name": "variable.other.link.underline.phpdoc"
						},
						"1": {
							"name": "entity.name.type.instance.phpdoc"
						}
					},
					"patterns": [
						{
							"match": "(?i)(([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?\\\\)",
							"captures": {
								"0": {
									"name": "variable.other.link.underline.phpdoc"
								},
								"1": {
									"name": "entity.name.type.instance.phpdoc"
								}
							}
						}
					]
				},
				{
					"begin": "(?i)(?=[\\\\$a-z_])",
					"end": "(?i)([a-z_][a-z_0-9]*)?(?![a-z0-9_\\\\])",
					"endCaptures": {
						"0": {
							"name": "variable.other.link.underline.phpdoc"
						},
						"1": {
							"name": "entity.name.type.instance.phpdoc"
						}
					},
					"patterns": [
						{
							"match": "(?i)(([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?\\\\)",
							"captures": {
								"0": {
									"name": "variable.other.link.underline.phpdoc"
								},
								"1": {
									"name": "entity.name.type.instance.phpdoc"
								}
							}
						}
					]
				}
			]
		},
		"docblock-array-type-2": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.type.begin.bracket.round.phpdoc"
				}
			},
			"end": "(\\))(\\[\\])|(?=\\*/)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.type.end.bracket.round.phpdoc"
				},
				"2": {
					"name": "keyword.other.array.phpdoc"
				}
			},
			"patterns": [
				{
					"include": "#docblock-array-type-2"
				},
				{
					"include": "#docblock-array-type-1"
				},
				{
					"include": "#docblock-data-types"
				},
				{
					"match": "\\|",
					"name": "punctuation.separator.delimiter.zephir"
				}
			]
		},
		"docblock-array-type-1": {
			"match": "(?i)([$a-z_\\x{7f}-\\x{7fffffff}\\\\][a-z0-9_\\x{7f}-\\x{7fffffff}\\\\]*)(\\[\\])",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#docblock-data-types"
						}
					]
				},
				"2": {
					"name": "keyword.other.array.phpdoc"
				}
			}
		},
		"numbers": {
			"patterns": [
				{
					"match": "0[xX][0-9a-fA-F]+",
					"name": "constant.numeric.hex.zephir"
				},
				{
					"match": "0[bB][01]+",
					"name": "constant.numeric.binary.zephir"
				},
				{
					"match": "0[0-7]+",
					"name": "constant.numeric.octal.zephir"
				},
				{
					"match": "(?:[0-9]*(\\.)[0-9]+(?:[eE][+-]?[0-9]+)?|[0-9]+(\\.)[0-9]*(?:[eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)",
					"name": "constant.numeric.decimal.zephir",
					"captures": {
						"1": {
							"name": "punctuation.separator.decimal.period.zephir"
						},
						"2": {
							"name": "punctuation.separator.decimal.period.zephir"
						}
					}
				},
				{
					"match": "0|[1-9][0-9]*",
					"name": "constant.numeric.decimal.zephir"
				}
			]
		},
		"object": {
			"patterns": [
				{
					"begin": "(->)(\\$?{)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.class.zephir"
						},
						"2": {
							"name": "punctuation.definition.variable.zephir"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.variable.zephir"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "(?i)(->)([$a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.class.zephir"
						},
						"2": {
							"name": "entity.name.function.zephir"
						},
						"3": {
							"name": "punctuation.definition.arguments.begin.bracket.round.zephir"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.arguments.end.bracket.round.zephir"
						}
					},
					"name": "meta.method-call.zephir",
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"captures": {
						"1": {
							"name": "keyword.operator.class.zephir"
						},
						"2": {
							"name": "variable.other.property.zephir"
						},
						"3": {
							"name": "punctuation.definition.variable.zephir"
						}
					},
					"match": "(?i)(->)((\\$+)?[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?"
				}
			]
		},
		"punctuation-semicolon": {
			"name": "punctuation.terminator.statement.zephir",
			"match": ";"
		},
		"punctuation-comma": {
			"name": "punctuation.separator.comma.zephir",
			"match": ","
		},
		"regex-double-quoted": {
			"begin": "\"/(?=(\\\\.|[^\"/])++/[imsxeADSUXu]*\")",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.zephir"
				}
			},
			"end": "(/)([imsxeADSUXu]*)(\")",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.zephir"
				}
			},
			"name": "string.regexp.double-quoted.zephir",
			"patterns": [
				{
					"match": "[$^+*]",
					"name": "keyword.operator.regexp.zephir"
				}
			]
		},
		"scope-resolution": {
			"patterns": [
				{
					"match": "(?i)([$a-z_\\x{7f}-\\x{7fffffff}\\\\][a-z0-9_\\x{7f}-\\x{7fffffff}\\\\]*)(?=\\s*::|->)",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "(?<!->|\\$)\\b(self|static|parent)\\b",
									"name": "variable.language.${1:/downcase}.zephir"
								},
								{
									"include": "#class-name"
								},
								{
									"include": "#variable-name"
								}
							]
						}
					}
				},
				{
					"begin": "(?i)(::)\\s*([$a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.class.zephir"
						},
						"2": {
							"name": "entity.name.function.zephir"
						},
						"3": {
							"name": "punctuation.definition.arguments.begin.bracket.round.zephir"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.arguments.end.bracket.round.zephir"
						}
					},
					"name": "meta.method-call.static.zephir",
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "(?i)(::)\\s*(class)\\b",
					"captures": {
						"1": {
							"name": "keyword.operator.class.zephir"
						},
						"2": {
							"name": "keyword.other.class.zephir"
						}
					}
				},
				{
					"match": "(?i)(::)\\s*(?:([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)|([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*))?",
					"captures": {
						"1": {
							"name": "keyword.operator.class.zephir"
						},
						"2": {
							"name": "punctuation.definition.variable.zephir"
						},
						"3": {
							"name": "constant.other.class.zephir"
						}
					}
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"include": "#regex-double-quoted"
				},
				{
					"include": "#string-double-quoted"
				},
				{
					"include": "#string-single-quoted"
				}
			]
		},
		"string-double-quoted": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.zephir"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.zephir"
				}
			},
			"name": "string.quoted.double.zephir",
			"patterns": [
				{
					"include": "#interpolation_double_quoted"
				},
				{
					"match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
					"name": "constant.character.escape.zephir"
				}
			]
		},
		"string-single-quoted": {
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.zephir"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.zephir"
				}
			},
			"name": "string.quoted.single.zephir",
			"patterns": [
				{
					"match": "\\\\[\\\\']",
					"name": "constant.character.escape.zephir"
				},
				{
					"match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
					"name": "constant.character.escape.zephir"
				}
			]
		},
		"use-inner": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "(?i)\\b(as)\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.use-as.zephir"
						}
					},
					"end": "(?i)[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*",
					"endCaptures": {
						"0": {
							"name": "entity.other.alias.zephir"
						}
					}
				},
				{
					"include": "#class-name"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"var_global": {
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.zephir"
				}
			},
			"match": "((_(GET|POST|REQUEST|COOKIE|FILES))|arg(v|c))\\b",
			"name": "variable.other.global.zephir"
		},
		"var_global_safer": {
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.zephir"
				}
			},
			"match": "((_(ENV|SERVER|SESSION)))",
			"name": "variable.other.global.safer.zephir"
		},
		"var_basic": {
			"patterns": [
				{
					"match": "(?i)[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*",
					"name": "variable.other.zephir",
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.zephir"
						}
					}
				}
			]
		},
		"variable-name": {
			"patterns": [
				{
					"include": "#var_global"
				},
				{
					"include": "#var_global_safer"
				},
				{
					"captures": {
						"1": {
							"name": "variable.other.zephir"
						},
						"2": {
							"name": "punctuation.definition.variable.zephir"
						},
						"4": {
							"name": "keyword.operator.class.zephir"
						},
						"5": {
							"name": "variable.other.property.zephir"
						},
						"6": {
							"name": "punctuation.section.array.begin.zephir"
						},
						"7": {
							"name": "constant.numeric.index.zephir"
						},
						"8": {
							"name": "variable.other.index.zephir"
						},
						"9": {
							"name": "punctuation.definition.variable.zephir"
						},
						"10": {
							"name": "string.unquoted.index.zephir"
						},
						"11": {
							"name": "punctuation.section.array.end.zephir"
						}
					},
					"match": "(?i)((\\$+)?(?<name>[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*))(?:(->)(\\g<name>)|(\\[)(?:(\\d+)|((\\$+)?\\g<name>)|([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*))(\\]))?"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"include": "#var_language"
				},
				{
					"include": "#var_global"
				},
				{
					"include": "#var_global_safer"
				}
			]
		},
		"var_language": {
			"patterns": [
				{
					"match": "(?<!->|\\$)\\b(this)\\b",
					"captures": {
						"1": {
							"name": "variable.language.this.zephir"
						}
					}
				}
			]

		},
		"switch_statement": {
			"patterns": [
				{
					"match": "\\s+(?=switch\\b)"
				},
				{
					"begin": "\\bswitch\\b(?!\\s*\\(?.*\\)?\\s*:)",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.switch.zephir"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.section.switch-block.end.bracket.curly.zephir"
						}
					},
					"name": "meta.switch-statement.zephir",
					"patterns": [
						{
							"begin": "\\(",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.switch-expression.begin.bracket.round.zephir"
								}
							},
							"end": "\\)",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.switch-expression.end.bracket.round.zephir"
								}
							},
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						{
							"begin": "\\{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.section.switch-block.begin.bracket.curly.zephir"
								}
							},
							"end": "(?=\\})",
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					]
				}
			]
		},
		"control-flow": {
			"match": "\\s*(?<!->|\\$)\\b(break|case|continue|declare|default|die|let|var|do|else(if)?|exit|(?:un)?likely|if|return|match|switch|use|while|loop|yield)\\b(?!\\$|->)",
			"captures": {
				"1": {
					"name": "keyword.control.${1:/downcase}.zephir"
				}
			}
		},
		"for-loop": {
			"name": "meta.loop.zephir",
			"begin": "(?<!->|\\$)\\b(for)\\b(?:\\s*(\\())?\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.zephir"
				},
				"2": {
					"name": "meta.brace.round.zephir"
				}
			},
			"end": "(?:\\s*(\\)))?\\s*(\\{)",
			"endCaptures": {
				"1": {
					"name": "meta.brace.round.zephir"
				},
				"2": {
					"name": "punctuation.definition.block.zephir"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "(,)\\s*(?!\\S)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.separator.comma.zephir"
						}
					},
					"end": "(?<!,)((?=(\\s+(in)\\s+(reverse\\s+)?)|^\\s*$))|((?<=\\S)(?=\\s*$))",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#variable-name"
						}
					]
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"match": "\\b(in|reverse)\\b",
					"name": "keyword.operator.expression.${1:/downcase}.zephir"
				}
			]
		},
		"null_coalescing": {
			"match": "\\?\\?",
			"name": "keyword.operator.null-coalescing.zephir"
		},
		"ternary_shorthand": {
			"match": "\\?:",
			"name": "keyword.operator.ternary.zephir"
		},
		"ternary_expression": {
			"begin": "\\?",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.ternary.zephir"
				}
			},
			"end": ":",
			"endCaptures": {
				"0": {
					"name": "keyword.operator.ternary.zephir"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		}
	}
}
